#! /bin/bash
#!----------------------------------------------------------------------------
#! 
#! batchScript
#!
#! create a batch script template for use in containers
#!
#! Usage: 
#!     batchScript --help
#!
#! History:
#!   08Oct18: A. De Silva, First version
#!
#!----------------------------------------------------------------------------

shopt -s expand_aliases

alrb_progname=batchScript

#!----------------------------------------------------------------------------
alrb_fn_batchScriptHelp()
#!----------------------------------------------------------------------------
{
    \cat <<EOF
Usage: batchScript [options] <commands or file to run>

    Create a script that you can use to submit to the batch system

    Options (to override defaults) are:
     -h  --help               Print this help message
     -o  --output             Output file for the script
     -O  --Output             Output file for the script but delete existing
                               file if it exists

Site local configurations (users, please do not override this):
- either 
  ALRB_CONT_SITECONFIGBATCH : location of text file which will be included
- or create the file as
  \$ALRB_localConfigDir/siteConfigBatch.txt

User configurations to override, define this env variable:
  ALRB_CONT_USERCONFIGBATCH : location of text file which will be included
 
EOF
}


#!----------------------------------------------------------------------------
# main
#!----------------------------------------------------------------------------

alrb_shortopts="h,o:,O:" 
alrb_longopts="help,output:,Output:"
alrb_opts=`$ATLAS_LOCAL_ROOT_BASE/utilities/wrapper_parseOptions.sh bash $alrb_shortopts $alrb_longopts $alrb_progname "$@"`
if [ $? -ne 0 ]; then
    \echo " If it is an option for a tool, you need to put it in double quotes." 1>&2
    exit 64
fi
eval set -- "$alrb_opts"

alrb_output=""
alrb_cmdToRun=""

while [ $# -gt 0 ]; do
    : debug: $1
    case $1 in
        -h|--help)
            alrb_fn_batchScriptHelp
            exit 0
            ;;
        -o|--output)
	    alrb_output="$2"
	    shift 2
	    ;;
        -O|--Output)
	    alrb_output="$2"
	    if [ -e "$alrb_output" ]; then
		\rm -f "$alrb_output"
	    fi
	    shift 2
	    ;;
        --)
            shift
            break
            ;;
        *)
            \echo "Internal Error: option processing error: $1" 1>&2
            exit 1
            ;;
    esac
done

if [ $# -eq 0 ]; then
    \echo "Error: command or file to run is missing"
    alrb_fn_batchScriptHelp
    exit 64
else
    alrb_cmdToRun="$@"
    export ALRB_CONT_RUNPAYLOAD="${alrb_cmdToRun//\"/\\\\\\\"}"
fi

if [ "$alrb_output" != "" ]; then
    if [ -e "$alrb_output" ]; then
	\echo "Error: output file $alrb_output exists"
	\echo "       use -O --Output if you want to overwrite"
	exit 64
    fi
fi

mkdir -p /alrb/.batchTemplate
alrb_tmpFile=`\mktemp /alrb/.batchTemplate/batch-XXXXXX  2>&1`
if [ $? -ne 0 ]; then
    \echo "Error: unable to create buffer file"
    exit 64
fi

alrb_jobheader="hostname -f; date; id -a"
if [[ ! -z $ALRB_CONT_PRESETUP ]] && [[ "$ALRB_CONT_PRESETUP" != "" ]]; then
    \echo "$ALRB_CONT_PRESETUP" | \grep -e "$alrb_jobheader" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
	export ALRB_CONT_PRESETUP="$ALRB_CONT_PRESETUP;$alrb_jobheader" 
    fi
else
    export ALRB_CONT_PRESETUP="$alrb_jobheader" 
fi


\cat << EOF >> $alrb_tmpFile 
#! /bin/bash -l
#
#  This is a template for a batch job which you can use to submit 
#
# See also this link on how to submit to batch queues
# https://twiki.atlas-canada.ca/bin/view/AtlasCanada/ATLASLocalRootBase2#Batch_Jobs
#
#
EOF

if [[ ! -z $ALRB_CONT_SITECONFIGBATCH ]] && [[ -e $ALRB_CONT_SITECONFIGBATCH ]] ; then
    \echo "
# site configurations for batch \$ALRB_CONT_SITECONFIGBATCH" >> $alrb_tmpFile
    \cat $ALRB_CONT_SITECONFIGBATCH >> $alrb_tmpFile
elif [ -e $ALRB_localConfigDir/siteConfigBatch.txt ]; then
    \echo "
# site configurations for batch \$ALRB_localConfigDir/siteConfigBatch.txt" >> $alrb_tmpFile
    \cat $ALRB_localConfigDir/siteConfigBatch.txt >> $alrb_tmpFile
fi

if [[ ! -z $ALRB_CONT_USERCONFIGBATCH ]] && [[ -e $ALRB_CONT_USERCONFIGBATCH ]] ; then
    \echo "
# user configurations for batch \$ALRB_CONT_USERCONFIGBATCH" >> $alrb_tmpFile
    \cat $ALRB_CONT_USERCONFIGBATCH >> $alrb_tmpFile
fi


\echo "
# Environment variables to pass on" >> $alrb_tmpFile
alrb_tmpVal='env | \grep 
 -e "SITE_NAME="
 -e "PANDA_SITE_NAME="
 -e "ATLAS_SITE_NAME="
 -e "X509_USER_PROXY="
 -e "RUCIO_ACCOUNT="
 -e "FRONTIER_SERVER="
 -e "ALRB_[[:alnum:]]*Version="
 -e "ALRB_menuFmtSkip="
 -e "ALRB_CONT_OPTS="
 -e "ALRB_CONT_CMDOPTS="
 -e "ALRB_CONT_SWTYPE="
 -e "ALRB_CONT_PRESETUP="
 -e "ALRB_CONT_POSTSETUP="
 -e "ALRB_CONT_RUNPAYLOAD="
 -e "ALRB_localConfigDir="
 -e "ALRB_testPath="
| \cut -f 1 -d "="
'
for alrb_item in `eval $alrb_tmpVal`; do
    \echo "export "${alrb_item}=\"${!alrb_item}\" >> $alrb_tmpFile
done

\cat << EOF >> $alrb_tmpFile 

# ideally setupATLAS is defined by the site admins.  Just in case ....
alias | \grep -e "setupATLAS" > /dev/null 2>&1
if [ \$? -ne 0 ]; then
    if [ ! \`typeset  -f setupATLAS > /dev/null\` ]; then
	function setupATLAS
	{
            if [ -d  /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase ]; then
		export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
		source \$ATLAS_LOCAL_ROOT_BASE/user/atlasLocalSetup.sh \$@
		return \$?
            else
		\echo "Error: cvmfs atlas repo is unavailable"
		return 64
            fi
	}
    fi
fi
EOF

alrb_tmpVal=`\echo $ALRB_CONT_SETUPATLASOPT | \sed -e 's|+batch||Ig'`

\cat << EOF >> $alrb_tmpFile 

# setupATLAS -c <container> which will run and also return the exit code
#  (setupATLAS is source $ATLAS_LOCAL_ROOT_BASE/user/atlasLocalSetup.sh)
setupATLAS -c $alrb_tmpVal
exit \$?
EOF

if [ "$alrb_output" != "" ]; then
    cp $alrb_tmpFile "$alrb_output"
    chmod +x "$alrb_output"
else
    \cat $alrb_tmpFile
fi

if [ -e $alrb_tmpFile ]; then
    \rm -f $alrb_tmpFile
fi

exit 0
